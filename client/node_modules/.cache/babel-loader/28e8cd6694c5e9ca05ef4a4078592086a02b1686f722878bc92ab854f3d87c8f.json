{"ast":null,"code":"var _jsxFileName = \"/Users/andy/Bootcamp/project-4/tee-tracker/client/src/App.js\";\nimport \"./App.css\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport Header from \"./components/Header/index\";\nimport Footer from \"./components/Footer/index\";\nimport Nav from \"./components/Nav/index\";\nimport Home from \"./pages/Home\";\nimport ScoreCard from './pages/ScoreCard';\n\n// Construct our main GraphQL API endpoint\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst httpLink = createHttpLink({\n  uri: '/graphql'\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, {\n  headers\n}) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n});\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(ApolloProvider, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(Router, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(ScoreCard, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["ApolloClient","InMemoryCache","ApolloProvider","BrowserRouter","Router","Route","Routes","Header","Footer","Nav","Home","ScoreCard","jsxDEV","_jsxDEV","httpLink","createHttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","authorization","client","link","concat","cache","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andy/Bootcamp/project-4/tee-tracker/client/src/App.js"],"sourcesContent":["import \"./App.css\";\n\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\n\nimport Header from \"./components/Header/index\";\nimport Footer from \"./components/Footer/index\";\nimport Nav from \"./components/Nav/index\";\nimport Home from \"./pages/Home\";\nimport ScoreCard from './pages/ScoreCard'\n\n// Construct our main GraphQL API endpoint\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = localStorage.getItem('id_token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Header />\n        <Nav />\n        <div>\n        <ScoreCard />\n          {/* <Routes />\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/scoreCard\" element={<ScoreCard />} />\n          <Routes /> */}\n        </div>\n     \n        <Footer />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAO,WAAW;AAElB,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAC5E,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,QAAQ,kBAAkB;AAEzE,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,MAAM,MAAM,2BAA2B;AAC9C,OAAOC,GAAG,MAAM,wBAAwB;AACxC,OAAOC,IAAI,MAAM,cAAc;AAC/B,OAAOC,SAAS,MAAM,mBAAmB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,QAAQ,GAAGC,cAAc,CAAC;EAC9BC,GAAG,EAAE;AACP,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGC,UAAU,CAAC,CAACC,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC9C;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EAC9C;EACA,OAAO;IACLH,OAAO,EAAE;MACP,GAAGA,OAAO;MACVI,aAAa,EAAEH,KAAK,GAAI,UAASA,KAAM,EAAC,GAAG;IAC7C;EACF,CAAC;AACH,CAAC,CAAC;AAEF,MAAMI,MAAM,GAAG,IAAIzB,YAAY,CAAC;EAC9B;EACA0B,IAAI,EAAET,QAAQ,CAACU,MAAM,CAACb,QAAQ,CAAC;EAC/Bc,KAAK,EAAE,IAAI3B,aAAa,CAAC;AAC3B,CAAC,CAAC;AAGF,SAAS4B,GAAGA,CAAA,EAAG;EACb,oBACEhB,OAAA,CAACX,cAAc;IAACuB,MAAM,EAAEA,MAAO;IAAAK,QAAA,eAC7BjB,OAAA,CAACT,MAAM;MAAA0B,QAAA,gBACLjB,OAAA,CAACN,MAAM;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACVrB,OAAA,CAACJ,GAAG;QAAAsB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACPrB,OAAA;QAAAiB,QAAA,eACAjB,OAAA,CAACF,SAAS;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKR,CAAC,eAENrB,OAAA,CAACL,MAAM;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACK,CAAC;AAErB;AAACC,EAAA,GAlBQN,GAAG;AAoBZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}